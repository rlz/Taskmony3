type Query {
  tasks(
    id: [ID!]
    directionId: [ID]
    withNotificationsAfter: String
    offset: Int
    limit: Int
  ): [Task!]
 
  ideas(
    id: [ID!]
    directionId: [ID]
    withNotificationsAfter: String
    offset: Int
    limit: Int
  ): [Idea!]

  users(
    id: [ID!]
    email: [String!]
    login: [String!]
    offset: Int
    limit: Int
  ): [User!]

  directions(id: [ID!]): [Direction!]
}

type Mutation {
  taskAdd(input: TaskAddInput!): TaskAddPayload
  ideaAdd(input: IdeaAddInput!): IdeaAddPayload
  directionAdd(input: DirectionAddInput!): DirectionAddPayload
  taskAddComment(input: TaskAddCommentInput!): TaskAddCommentPayload
  ideaAddComment(input: IdeaAddCommentInput!): IdeaAddCommentPayload 

  taskSetDescription(input: TaskSetDescriptionInput!): TaskSetDescriptionPayload
  taskSetDetails(input: TaskSetDetailsInput!): TaskSetDetailsPayload
  taskSetDirection(input: TaskSetDirectionInput!): TaskSetDirectionPayload
  taskSetDeletionDate(input: TaskSetDeletionDateInput!): TaskSetDeletionDatePayload
  taskSetAssignee(input: TaskSetAssigneeInput!): TaskSetAssigneePayload
  taskSetStartDate(input: TaskSetStartDateInput!): TaskSetStartDatePayload
  taskSetCompletionDate(input: TaskSetCompletionDateInput!): TaskSetCompletionDatePayload
  taskSetRepeatMode(input: TaskSetRepeatModeInput!): TaskSetRepeatModePayload

  ideaSetDescription(input: IdeaSetDescriptionInput!): IdeaSetDescriptionPayload
  ideaSetDetails(input: IdeaSetDetailsInput!): IdeaSetDetailsPayload
  ideaSetDirection(input: IdeaSetDirectionInput!): IdeaSetDirectionPayload
  ideaSetDeletionDate(input: IdeaSetDeletionDateInput!): IdeaSetDeletionDatePayload
  ideaSetGeneration(input: IdeaSetGenerationInput!): IdeaSetGenerationPayload
  ideaSetReviewDate(input: IdeaSetReviewDateInput!): IdeaSetReviewDatePayload

  commentSetText(input: CommentSetTextInput!): CommentSetTextPayload

  directionSetName(input: DirectionSetNameInput!): DirectionSetNamePayload
  directionSetDetails(input: DirectionSetDetailsInput!): DirectionSetDetailsPayload
  directionAddMember(input: DirectionAddMemberInput!): DirectionAddMemberPayload
  directionRemoveMember(input: DirectionRemoveMemberInput!): DirectionRemoveMemberPayload

  userSetNotificationReadTime(input: UserSetNotificationReadTimeInput!): UserSetNotificationReadTimePayload
  userSetLogin(input: UserSetLoginInput!): UserSetLoginPayload
  userSetDisplayName(input: UserSetDisplayNameInput!): UserSetDisplayNamePayload
  userSetEmail(input: UserSetEmailInput!): UserSetEmailPayload
  userSetPassword(input: UserSetPasswordInput!): UserSetPasswordPayload

  taskSubscribe(input: TaskSubscribeInput!): TaskSubscribePayload
  ideaSubscribe(input: IdeaSubscribeInput!): IdeaSubscribePayload

  taskUnsubscribe(input: TaskUnsubscribeInput!): TaskUnsubscribePayload
  ideaUnsubscribe(input: IdeaUnsubscribeInput!): IdeaUnsubscribePayload
}

input DirectionAddMemberInput {
  directionId: ID!
  userId: ID!
}

type DirectionAddMemberPayload {
  direction: Direction
}

input DirectionRemoveMemberInput {
  directionId: ID!
  userId: ID!
}

type DirectionRemoveMemberPayload {
  direction: Direction
}

input UserSetNotificationReadTimeInput {
  notificationReadTime: String
}

type UserSetNotificationReadTimePayload {
  user: User
}

input UserSetLoginInput {
  login: String!
}

type UserSetLoginPayload {
  user: User
}

input UserSetDisplayNameInput {
  displayName: String!
}

type UserSetDisplayNamePayload {
  user: User
}

input UserSetEmailInput {
  email: String!
}

type UserSetEmailPayload {
  user: User
}

input UserSetPasswordInput {
  password: String!
}

type UserSetPasswordPayload {
  user: User
}

input DirectionSetNameInput {
  directionId: ID!
  name: String!
}

type DirectionSetNamePayload {
  direction: Direction
}

input DirectionSetDetailsInput {
  directionId: ID!
  details: String
}

type DirectionSetDetailsPayload {
  direction: Direction
}

input CommentSetTextInput {
  commentId: ID!
  text: String!
}

type CommentSetTextPayload {
  comment: Comment
}

input IdeaSetReviewDateInput {
  reviewDate: String
}

type IdeaSetReviewDatePayload {
  idea: Idea
}

input IdeaSetGenerationInput {
  ideaId: ID!
  generation: Generation!
}

type IdeaSetGenerationPayload {
  idea: Idea
}

input TaskSetRepeatModeInput {
  taskId: ID!
  repeatMode: RepeatMode
  repeatEvery: Int
  numberOfRepetitions: Int
}

type TaskSetRepeatModePayload {
  task: Task
  repeatMode: RepeatMode
  repeatEvery: Int
  numberOfRepetitions: Int
}

input TaskSetCompletionDateInput {
  taskId: ID!
  completionDate: String
}

type TaskSetCompletionDatePayload {
  task: Task
}

input TaskSetStartDateInput {
  taskId: ID!
  startDate: String
}

type TaskSetStartDatePayload {
  task: Task
}

input TaskSetAssigneeInput {
  taskId: ID!
  assigneeId: ID
}

type TaskSetAssigneePayload {
  task: Task
}

input IdeaSetDeletionDateInput {
  ideaId: ID!
  deletionDate: String
}

type IdeaSetDeletionDatePayload {
  idea: Idea
}

input TaskSetDeletionDateInput {
  taskId: ID!
  deletionDate: String
}

type TaskSetDeletionDatePayload {
  task: Task
}

input IdeaSetDirectionInput {
  ideaId: ID!
  directionId: ID
}

type IdeaSetDirectionPayload {
  idea: Idea
}

input TaskSetDirectionInput {
  taskId: ID!
  directionId: ID
}

type TaskSetDirectionPayload {
  task: Task
}

input IdeaSetDescriptionInput {
  ideaId: ID!
  description: String!
}

type IdeaSetDescriptionPayload {
  idea: Idea
}

input TaskSetDescriptionInput {
  taskId: ID!
  description: String!
}

type TaskSetDescriptionPayload {
  task: Task
}

input IdeaSetDetailsInput {
  entityId: ID!
  details: String
}

type IdeaSetDetailsPayload {
  idea: Idea
}

input TaskSetDetailsInput {
  taskId: ID!
  details: String
}

type TaskSetDetailsPayload {
  task: Task
}

input TaskUnsubscribeInput {
  taskId: ID!
}

type TaskUnsubscribePayload {
  task: Task
}

input IdeaUnsubscribeInput {
  ideaId: ID!
}

type IdeaUnsubscribePayload {
  idea: Idea
}

input IdeaAddCommentInput {
  ideaId: ID!
  text: String!
}

type IdeaAddCommentPayload {
  comment: Comment
}

input TaskAddCommentInput {
  taskId: ID!
  text: String!
}

type TaskAddCommentPayload {
  comment: Comment
}

input IdeaSubscribeInput {
  ideaId: ID!
}

type IdeaSubscribePayload {
  idea: Idea
}

input TaskSubscribeInput {
  taskId: ID!
}

type TaskSubscribePayload {
  task: Task
}

input DirectionAddInput {
  name: String!
  details: String
}

type DirectionAddPayload {
  direction: Direction
}

input IdeaAddInput {
  description: String!
  details: String
  assigneeId: ID
  directionId: ID
  generation: Generation!
}

type IdeaAddPayload {
  idea: Idea
}

input TaskAddInput {
  description: String!
  details: String
  assigneeId: ID
  directionId: ID
  startDate: String!
  repeatMode: RepeatMode
  """
  Repeat every n days if repeatMode is custom
  """
  repeatEvery: Int
  numberOfRepetitions: Int
}

type TaskAddPayload {
  task: Task
  repeatMode: RepeatMode
  repeatEvery: Int
  numberOfRepetitions: Int
}

enum RepeatMode {
  DAY
  WEEK
  MONTH
  YEAR
  CUSTOM
}

type Task {
  id: ID!
  description: String
  details: String
  createdBy: User
  assignee: User
  startDate: String
  completionDate: String
  direction: Direction
  creationDate: String
  deletionDate: String
  comments: [Comment!]
  subscribers: [User!]
  groupID: ID
  notifications: [Notification!]
}

enum Generation {
  HOT
  LATER
  TOO_GOOD_TO_DELETE
}

type Idea {
  id: ID!
  description: String
  details: String
  generation: Generation
  createdBy: User
  direction: Direction
  creationDate: String
  deletionDate: String
  reviewDate: String
  comments: [Comment!]
  subscribers: [User!]
  notifications: [Notification!]
}

type User {
  id: ID!
  login: String
  password: String
  displayName: String
  email: String
  """
  Last notification read time
  """
  notificationReadTime: String
  tasks: [Task!]
  ideas: [Idea!]
}

type Comment {
  id: ID!
  author: User
  time: String
  text: String
}

type Direction {
  id: ID!
  name: String
  details: String
  owner: User
  members: [User!]
  tasks: [Task!]
  ideas: [Idea!]
}

enum ActionType {
  """
  Task added to the direction
  """
  TASK_ADDED
  """
  Task deleted (from the direction or subscribed task)
  """
  TASK_DELETED
  """
  Task assigned to the user
  """
  TASK_ASSIGNED
  """
  Idea added to the direction
  """
  IDEA_ADDED
  """
  Idea deleted (from the direction or subscribed idea)
  """
  IDEA_DELETED
  """
  Member added to the direction
  """
  MEMBER_ADDED
  """
  Comment added to the task or idea
  """
  COMMENT_ADDED
  """
  Task, idea or direction updated
  """
  ITEM_UPDATED
}

union ActionItem = User | Task | Idea | Comment

type Notification {
  id: ID!
  time: String
  actor: User            # who
  actionType: ActionType # action
  actionItem: ActionItem # what
}

# notification use cases
#
# who     | action     | what       | where
#–––––––––+––––––––––––+––––––––––––+––––––––––––
# user A  | updated    |            | task B
# user A  | updated    |            | idea B
# user A  | deleted    |            | task B
# user A  | deleted    |            | idea B
# user A  | added      | comment B  | task C
# user A  | added      | comment B  | idea C
# user A  | updated    |            | direction B
# user A  | added      | task B     | direction C
# user A  | added      | idea B     | direction C
# user A  | deleted    | task B     | direction C
# user A  | deleted    | idea B     | direction C
# user A  | assigned   | user B     | task C
